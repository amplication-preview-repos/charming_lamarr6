/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Internship as PrismaInternship,
  Employer as PrismaEmployer,
} from "@prisma/client";

export class InternshipServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InternshipCountArgs, "select">
  ): Promise<number> {
    return this.prisma.internship.count(args);
  }

  async internships(
    args: Prisma.InternshipFindManyArgs
  ): Promise<PrismaInternship[]> {
    return this.prisma.internship.findMany(args);
  }
  async internship(
    args: Prisma.InternshipFindUniqueArgs
  ): Promise<PrismaInternship | null> {
    return this.prisma.internship.findUnique(args);
  }
  async createInternship(
    args: Prisma.InternshipCreateArgs
  ): Promise<PrismaInternship> {
    return this.prisma.internship.create(args);
  }
  async updateInternship(
    args: Prisma.InternshipUpdateArgs
  ): Promise<PrismaInternship> {
    return this.prisma.internship.update(args);
  }
  async deleteInternship(
    args: Prisma.InternshipDeleteArgs
  ): Promise<PrismaInternship> {
    return this.prisma.internship.delete(args);
  }

  async getEmployer(parentId: string): Promise<PrismaEmployer | null> {
    return this.prisma.internship
      .findUnique({
        where: { id: parentId },
      })
      .employer();
  }
}
